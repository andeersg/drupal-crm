<?php

/**
 * Tests basic CRM functions.
 */
abstract class CRMBaseTestCase extends DrupalWebTestCase {

  protected $user;
  protected $admin;
//  protected $admin_permissions = array(
//    'access administration pages',
//    'crm manage',
//    'crm administer',
//    'access content',
//  );
//  protected $user_permissions = array(
//    'access content',
//  );
//
//  function setUp() {
//
//    $modules = func_get_args();
//    if (isset($modules[0]) && is_array($modules[0])) {
//      $modules = $modules[0];
//    }
//    parent::setUp($modules);
//  }
//
//  protected function mergePermissions() {
//    $args = func_get_args();
//    $permission = array();
//    foreach ($args as $arg) {
//      if (is_array($arg)) {
//        foreach ($arg as $perm) {
//          if (!in_array($perm, $permission)) {
//            $permission[] = $perm;
//          }
//        }
//      }
//      else {
//        if (!in_array($arg, $permission)) {
//          $permission[] = $arg;
//        }
//      }
//    }
//    return $permission;
//  }
//

  /**
   * Helper function to determine which modules should be enabled. Should be
   * used in place of standard parent::setUp('moduleA', 'moduleB') call.
   *
   * @param $set
   *  Which set of modules to load. Can be one of:
   *    'all': (default) All Commerce modules, including UI and payment modules.
   *    'ui': All API and UI modules.
   *    'api': Just API modules (includes commerce_ui since checkout depends on it).
   *    'dependencies': Common dependencies required by many Commerce API and UI
   *      modules.
   * @param $other_modules
   *  Array of modules to include in addition to the sets loaded by $set
   */
  protected function setUpHelper($set = 'all', array $other_modules = array()) {

    $dependencies = array(
      // API
      'ctools',
      'entity',
//      'entity_token',
//      'sms',
      'email',
//      'telephone_validation',
//      'libraries',
      'entityreference',
      'inline_entity_form',
      // UI
      'views',
      'views_bulk_operations',
      //'views_ui',
      'field',
      'field_ui',
      'field_sql_storage',
    );
    $api = array(
      'crm',
      'crm_reference',
      'crm_channel',
      'crm_contact',
      'crm_message',
      'crm_message_template',
      'crm_campaign',
      'crm_user',
      'crm_email',
    );
    $ui = array(
      'crm_channel_ui',
      'crm_contact_ui',
      'crm_message_ui',
      'crm_message_template_ui',
      'crm_campaign_ui',
      'crm_newsletter',
    );

    // Final module list
    $modules = array();

    // Cascade down the list and add sets
    switch ($set) {
      case 'all':
//        $modules = array_merge($payment, $modules);
      case 'ui':
        $modules = array_merge($ui, $modules);
      case 'api':
        $modules = array_merge($api, $modules);
      case 'dependencies':
        $modules = array_merge($dependencies, $modules);
        break;
    }

    // Bring in modules specified by caller
    $modules = array_merge($modules, $other_modules);

    return $modules;
  }

  /**
   * Helper function to get different combinations of permission sets.
   *
   * @param $set
   *  Can be a single string (from the following) or can be an array containing
   *  multiple values that should be merged:
   *    'site admin': Admin permissions for Drupal core modules
   *    'store admin': All commerce "administer X" permissions
   */
  protected function permissionBuilder($sets) {
    if (is_string($sets)) {
      $sets = array($sets);
    }
    $admin = array(
      'access administration pages',
      'crm manage',
      'crm administer',
      'crm campaign overview',
      'crm campaign create',
      'crm campaign view',
      'crm campaign update',
      'crm campaign delete',
      'crm campaign send',
      'crm channel overview',
      'crm channel create',
      'crm channel update',
      'crm channel delete',
      'crm channel view',
      'crm contact overview',
      'crm contact create',
      'crm contact update',
      'crm contact delete',
      'crm contact view',
      'crm message template overview',
      'crm message template create',
      'crm message template update',
      'crm message template delete',
      'crm message overview',
      'crm message create',
      'crm message update',
      'crm message delete',
      'crm message view',
      'crm message send',
      'crm message cancel',
      'administer users',
    );
    $user = array(
      'access content',
    );

    $final_permissions = array();

    foreach ($sets as $set) {
      switch ($set) {
        case 'user':
          $final_permissions = array_unique(array_merge($final_permissions, $user));
          break;
        case 'admin':
          $final_permissions = array_unique(array_merge($final_permissions, $admin));
          break;
      }
    }

    return $final_permissions;
  }

  /**
   * Wrapper to easily create users from arrays returned by permissionBuilder().
   *
   * @param $set
   *  See permissionBuilder() function
   * @return
   *  A user with the permissions returned from permissionBuilder().
   */
  protected function createUserWithPermissionHelper($set) {
    $permissions = $this->permissionBuilder($set);
    $user = $this->drupalCreateUser($permissions);
    return $user;
  }

  /**
   * Returns a site administrator user. Only has permissions for administering
   * modules in Drupal core.
   */
  protected function createAdmin() {
    return $this->createUserWithPermissionHelper('admin');
  }

  /**
   * Returns a store administrator user. Only has permissions for administering
   * Commerce modules.
   */
  protected function createUser() {
    return $this->createUserWithPermissionHelper('user');
  }

  // =============== Helper functions ===============

  /**
   * Checks if a group of modules is enabled.
   *
   * @param $module_name
   *  Array of module names to check (without the .module extension)
   * @return
   *  TRUE if all of the modules are enabled.
   */
  protected function modulesUp($module_names) {
    if (is_string($module_names)) {
      $module_names = array($module_names);
    }
    foreach ($module_names as $module_name) {
      if (!module_exists($module_name)) {
        return FALSE;
      }
    }
    return TRUE;
  }

  /**
   * Generate a random valid email
   *
   * @param string $type
   *  Domain type
   *
   * @return string
   *  Valid email
   */
  protected function generateEmail($type = 'com'){
    return $this->randomName() . '@' . $this->randomName() . '.' . $type;
  }

  /**
   * @param array $values
   * @return bool
   */
  function createCampaign($values = array()) {
    $values += array(
      'title' => $this->randomString(8),
      'status' => CRM_CAMPAIGN_STATUS_REGISTERED,
      'log' => 'New campaign created',
    );
    $campaign = entity_create('crm_campaign', $values);
    entity_save('crm_campaign', $campaign);
    return $campaign;
  }

}
