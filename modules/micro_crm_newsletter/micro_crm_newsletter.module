<?php

/**
 * @file
 * Blocks and logic behind newsletter intetgration.
 */

define('MICRO_CRM_NEWSLETTER_CHANNEL_STATUS', 'newsletter');

/**
 * Implements hook_menu().
 */
function micro_crm_newsletter_menu() {
  $items = array();
  $items['admin/people/micro_crm/config/newsletter'] = array(
    'title' => 'Newsletter',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('micro_crm_newsletter_settings'),
    'access arguments' => array('micro crm manage'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'micro_crm_newsletter.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function micro_crm_newsletter_block_info() {
  return array(
    'newsletter' => array(
      'info' => t('Newsletter'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_micro_crm_channel_status_info().
 */
function micro_crm_newsletter_micro_crm_channel_status_info() {
  $statuses[MICRO_CRM_NEWSLETTER_CHANNEL_STATUS] = array(
    'title' => t('Newsletter'),
    'state' => MICRO_CRM_CHANNEL_STATE_ACTIVE,
  );
  return $statuses;
}

/**
 * Implements hook_block_view().
 */
function micro_crm_newsletter_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'newsletter':
      $block['subject'] = t('Newsletter');
      $block['content'] = drupal_get_form('micro_crm_newsletter_form');
      break;
  }
  return $block;
}

/**
 * Newsletter form.
 */
function micro_crm_newsletter_form($form, &$form_state) {
  $form['#tree'] = TRUE;

  if (!isset($form['#parents'])) {
    $form['#parents'] = array();
  }
  $form['bundles']['#tree'] = TRUE;
  foreach (_micro_crm_newsletter_get_channels() as $channel) {
    $form['bundles'][$channel] = array(
      '#tree' => TRUE,
    );
    $entity = entity_create('micro_crm_channel', array('type' => $channel));
    field_attach_form('micro_crm_channel', $entity, $form['bundles'][$channel], $form_state);
    array_walk_recursive($form['bundles'][$channel], '_micro_crm_reset_required');
  }

  $form['fields'] = array();
  foreach (_micro_crm_newsletter_get_custom_fields() as $field) {
    $instance = field_info_instance('micro_crm_contact', $field, 'micro_crm_contact');
    // Make all custom fields not required.
    $instance['required'] = FALSE;
    $field = field_info_field($field);
    $form['fields'] += field_default_form('micro_crm_contact', NULL, $field, $instance, LANGUAGE_NONE, NULL, $form, $form_state);
  }
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
  );

  return $form;
}

/**
 * Resets required property so none field is required.
 */
function _micro_crm_reset_required(&$value, $key) {
  if (($key === '#required') && ($value == TRUE)) {
    $value = FALSE;
  }
  // @todo: Check if at least one channel has value.
}

/**
 * @param $form
 * @param $form_state
 */
function micro_crm_newsletter_form_validate($form, &$form_state) {
  foreach (_micro_crm_newsletter_get_channels() as $channel) {
    $entity = entity_create('micro_crm_channel', array('type' => $channel));
    field_attach_form_validate('micro_crm_channel', $entity, $form, $form_state);
  }
}

/**
 * Newsletter form submit callback.
 */
function micro_crm_newsletter_form_submit($form, &$form_state) {
  $channels = array();
  foreach (_micro_crm_newsletter_get_channels() as $channel) {

    // Creates dummy entity.
    $entity = entity_create('micro_crm_channel', array('type' => $channel));

    // Attach all fields to entity.
    field_attach_submit('micro_crm_channel', $entity, $form, $form_state);

    if (micro_crm_channel_is_empty($channel, $entity)) {
      // Skip if channel is empty.
      continue;
    }

    if (!micro_crm_channel_is_unique($channel, $entity)) {
      // Load channel if it already exists.
      $entity = micro_crm_channel_load_by_values($channel, $entity);
      if (!is_object($entity)) {
        watchdog('micro_crm_newsletter', 'Unable to load channel', array(), WATCHDOG_WARNING);
        return;
      }
    }

    // Save channel as a newsletter ready.
    $entity->status = MICRO_CRM_NEWSLETTER_CHANNEL_STATUS;
    $entity->log = 'Channel claimed to receive newsletter messages';
    try {
      entity_save('micro_crm_channel', $entity);
    }
    catch (Exception $e) {
      watchdog_exception('micro_crm_newsletter', $e);
      drupal_set_message(t('Unable to submit form. Please try again or contact administrator'), 'error');
      $form_state['redirect'] = TRUE;
      return;
    }

    // Add to channels array to attach it later to contact.
    $channels[$entity->channel_id] = $entity->channel_id;
  }

  if (count($channels)) {
    // Process entity only if there is something to process.
    if (!($entity = micro_crm_channel_load_contact(array_keys($channels)))) {
      // If contact doesn't exist yet, create it.
      $entity = entity_create('micro_crm_contact', array());
    }
    if (is_array($entity) && count($entity) > 1) {
      // If more than one contact found - merge it together.
      $entity = micro_crm_contact_merge($entity);
    }
    elseif (is_array($entity)) {
      // If array contains only one
      $entity = reset($entity);
    }

    // If contact status was in disabled state, bump it to registered.
    $entity->status = MICRO_CRM_CONTACT_STATUS_REGISTERED;

    foreach ($form_state['values']['fields'] as $key => $field) {
      $info = field_info_field($key);
      $entity->{$key} = $field;
      // Check if field is empty and, if so, skip it.
      if (module_invoke($info['module'], 'field_is_empty', $entity->{$key}[LANGUAGE_NONE][0], $info)) {
        unset($entity->{$key});
      }
    }
    $wrapper = entity_metadata_wrapper('micro_crm_contact', $entity);

    $tmp = array();
    foreach ($wrapper->field_micro_crm_channel->getIterator() as $channel) {
      $tmp[] = $channel->getIdentifier();
    }
    foreach ($channels as $channel) {
      if (!in_array($channel, $tmp)) {
        $wrapper->field_micro_crm_channel[] = $channel;
      }
    }

    $entity->log = t('Contact modified by newsletter form.');
    try {
      entity_save('micro_crm_contact', $entity);
    }
    catch (Exception $e) {
      watchdog_exception('micro_crm_newsletter', $e);
      drupal_set_message(t('Unable to submit form. Please try again or contact administrator'), 'error');
      $form_state['redirect'] = TRUE;
      return;
    }
  }
}

/**
 * @return array
 *   Array of channels in key => key format.
 */
function _micro_crm_newsletter_get_channels() {
  $channels = array();
  foreach (variable_get('micro_crm_newsletter_channels', array()) as $channel) {
    if ($channel === 0) {
      continue;
    }
    $channels[$channel] = $channel;
  }
  return $channels;
}

/**
 * @return array
 *   Array of channels in key => key format.
 */
function _micro_crm_newsletter_get_custom_fields() {
  $custom_fields = array();
  foreach (variable_get('micro_crm_newsletter_custom_fields', array()) as $custom_field) {
    if ($custom_field === 0) {
      continue;
    }
    $custom_fields[$custom_field] = $custom_field;
  }
  return $custom_fields;
}
