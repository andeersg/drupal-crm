<?php

/**
 * @file
 *
 */

define('CRM_CONTACT_STATUS_REGISTERED', 'registered');

module_load_include('inc', 'crm_contact', 'crm_contact.entity');

/**
 * Implements hook_permission().
 */
function crm_contact_permission() {
  return array(
    'crm contact overview' => array(
      'title' => t('Access to contact list'),
    ),
    'crm contact create' => array(
      'title' => t('Create new contact'),
    ),
    'crm contact view' => array(
      'title' => t('View contact'),
    ),
    'crm contact update' => array(
      'title' => t('Update contact'),
    ),
    'crm contact delete' => array(
      'title' => t('Delete contact'),
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function crm_contact_hook_info() {
  $hooks = array(
    'crm_contact_status_info' => array(
      'group' => 'crm',
    ),
    'crm_contact_status_info_alter' => array(
      'group' => 'crm',
    ),
    'crm_contact_uri' => array(
      'group' => 'crm',
    ),
    'crm_contact_view' => array(
      'group' => 'crm',
    ),
    'crm_contact_presave' => array(
      'group' => 'crm',
    ),
    'crm_contact_update' => array(
      'group' => 'crm',
    ),
    'crm_contact_insert' => array(
      'group' => 'crm',
    ),
    'crm_contact_delete' => array(
      'group' => 'crm',
    ),
  );
  return $hooks;
}

/**
 * Implements hook_views_api().
 */
function crm_contact_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_contact') . '/includes/views',
  );
}

/**
 * Implements hook_crm_contact_status_info().
 */
function crm_contact_crm_contact_status_info() {
  $status = array();

  $status[CRM_CONTACT_STATUS_REGISTERED] = array(
    'title' => t('Registered'),
    'description' => t('Registered, unprocessed contact'),
    'weight' => -99,
  );

  return $status;
}

/**
 * Returns all statuses contact declared by modules.
 *
 * @return array
 *   List of statuses
 */
function crm_contact_statuses() {
  // First check the static cache for an order states array.
  $statuses = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the statuses now.
  if (empty($statuses)) {
    $statuses = module_invoke_all('crm_contact_status_info');

    // Give other modules a chance to alter the order states.
    drupal_alter('crm_contact_status_info', $statuses);

    uasort($statuses, 'drupal_sort_weight');
  }

  return $statuses;
}

/**
 * Returns status label.
 *
 * @param $status
 * @return null
 */
function crm_contact_status_get_name($status) {
  $statuses = crm_contact_statuses();
  if (isset($statuses[$status]['title'])) {
    return $statuses[$status]['title'];
  }
  return NULL;
}

/**
 * Returns list of available statuses.
 */
function crm_contact_status_options_list() {

  $options = array();

  foreach (crm_contact_statuses() as $key => $status) {
    $options[$key] = $status['title'];
  }

  return $options;
}

/**
 * @param $contact
 * @return bool|array
 */
function crm_contact_get_channel_ids($contact) {
  $wrapper = entity_metadata_wrapper('crm_contact', $contact);
  if (!$wrapper->__isset('crm_channel')) {
    return FALSE;
  }
  return $wrapper->crm_channel->raw();
}

/**
 * @param $contact
 * @param $channel_id
 * @return bool
 */
function crm_contact_channel_exists($contact, $channel_id) {
  if (!($channels = crm_contact_get_channel_ids($contact))) {
   return FALSE;
  }
  return in_array($channel_id, $channels);
}

/**
 * @param $contact
 * @param $channel
 * @return bool
 */
function crm_contact_channel_add(&$contact, $channel) {
  try {
    $wrapper = entity_metadata_wrapper('crm_contact', $contact);
    $wrapper->crm_channel[] = $channel;
    return TRUE;
  }
  catch (Exception $e) {
    watchdog_exception('crm_contact', $e);
    return FALSE;
  }
}

/**
 * @param $contact
 * @param $channel_id
 * @return bool
 */
function crm_contact_channel_remove(&$contact, $channel_id) {
  try {
    $wrapper = entity_metadata_wrapper('crm_contact', $contact);
    foreach ($wrapper->crm_channel->raw() as $delta => $target_id) {
      if ($target_id === $channel_id) {
        unset($wrapper->crm_channel[$delta]);
        return TRUE;
      }
    }
  }
  catch (Exception $e) {
    watchdog_exception('crm_contact', $e);
  }
  return FALSE;
}
