<?php

/**
 * @file
 *
 */

define('CRM_CHANNEL_STATUS_REGISTERED', 'registered');
define('CRM_CHANNEL_STATUS_UNREGISTERED', 'unregistered');
define('CRM_CHANNEL_STATE_ACTIVE', 'active');
define('CRM_CHANNEL_STATE_DISABLED', 'disabled');
define('CRM_CHANNEL_TOKEN_VALIDATION_INTERVAL', 86400);

module_load_include('inc', 'crm_channel', 'crm_channel.entity');

/**
 * Implements hook_menu().
 */
function crm_channel_menu() {

  $items['admin/crm/config/channel'] = array(
    'title' => 'Channel',
    'description' => 'Manage Channel configuration',
    'page callback' => 'crm_index',
    'page arguments' => array(),
    'access arguments' => array('crm administer'),
    'type' => MENU_NORMAL_ITEM,
  );

  foreach (crm_channel_type_option_list() as $type => $name) {
    $type_arg = strtr($type, '_', '-');
    $items['admin/crm/config/channel/' . $type_arg] = array(
      'title' => $name,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('crm_channel_ui_settings', $type),
      'access arguments' => array('crm administer'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  $items['admin/crm/channel/%crm_channel'] = array(
    'title callback' => 'crm_channel_label',
    'title arguments' => array(3),
    'page callback' => 'crm_channel_view',
    'page arguments' => array(3),
    'access callback' => 'crm_channel_access',
    'access arguments' => array('view', 3),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_hook_info().
 */
function crm_channel_hook_info() {
  $hooks = array(
    'crm_channel_state_info' => array(
      'group' => 'crm',
    ),
    'crm_channel_state_info_alter' => array(
      'group' => 'crm',
    ),
    'crm_channel_status_info' => array(
      'group' => 'crm',
    ),
    'crm_channel_status_info_alter' => array(
      'group' => 'crm',
    ),
    'crm_channel_view' => array(
      'group' => 'crm',
    ),
    'crm_channel_presave' => array(
      'group' => 'crm',
    ),
    'crm_channel_update' => array(
      'group' => 'crm',
    ),
    'crm_channel_insert' => array(
      'group' => 'crm',
    ),
    'crm_channel_delete' => array(
      'group' => 'crm',
    ),
    'crm_channel_label' => array(
      'group' => 'crm',
    ),
    'crm_channel_channel' => array(
      'group' => 'crm',
    ),
    'crm_channel_is_unique' => array(
      'group' => 'crm',
    ),
    'crm_channel_is_empty' => array(
      'group' => 'crm',
    ),
    'crm_channel_fields' => array(
      'group' => 'crm',
    ),
  );
  return $hooks;
}

/**
 * Implements hook_views_api().
 */
function crm_channel_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_channel') . '/includes/views',
  );
}

/**
 * Implements hook_permission().
 */
function crm_channel_permission() {
  return array(
    'crm channel overview' => array(
      'title' => t('Access to channel list'),
    ),
    'crm channel create' => array(
      'title' => t('Create new channel'),
    ),
    'crm channel view' => array(
      'title' => t('View channel'),
    ),
    'crm channel update' => array(
      'title' => t('Update channel'),
    ),
    'crm channel delete' => array(
      'title' => t('Delete channel'),
    ),
  );
}

/**
 * Implements hook_crm_channel_state_info().
 */
function crm_channel_crm_channel_state_info() {
  $states = array();

  $states[CRM_CHANNEL_STATE_DISABLED] = array(
    'title' => t('Disabled'),
    'description' => t('Disabled channel, we can track it but we cannot communicate.'),
    'weight' => -1,
  );
  $states[CRM_CHANNEL_STATE_ACTIVE] = array(
    'title' => t('Active'),
    'description' => t('Active channel, we can track it and communicate.'),
    'weight' => 1,
  );

  return $states;
}

/**
 * Returns all statuses declared by modules.
 *
 * @return array
 *   List of statuses
 */
function crm_channel_states() {
  // First check the static cache for an order states array.
  $states = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the statuses now.
  if (empty($states)) {
    $states = module_invoke_all('crm_channel_state_info');

    // Give other modules a chance to alter the order states.
    drupal_alter('crm_channel_state_info', $states);

    uasort($states, 'drupal_sort_weight');
  }

  return $states;
}

/**
 * Implements hook_crm_channel_status_info().
 */
function crm_channel_crm_channel_status_info() {
  $status = array();

  $status[CRM_CHANNEL_STATUS_UNREGISTERED] = array(
    'title' => t('Inactive'),
    'state' => CRM_CHANNEL_STATE_DISABLED,
    'weight' => -99,
  );

  $status[CRM_CHANNEL_STATUS_REGISTERED] = array(
    'title' => t('Active'),
    'description' => t('Registered, unprocessed channel'),
    'state' => CRM_CHANNEL_STATE_ACTIVE,
    'weight' => -99,
  );

  return $status;
}

/**
 * Returns all statuses declared by modules.
 *
 * @return array
 *   List of statuses
 */
function crm_channel_statuses($conditions = array()) {
  // First check the static cache for an order states array.
  $statuses = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the statuses now.
  if (empty($statuses)) {
    $statuses = module_invoke_all('crm_channel_status_info');

    // Give other modules a chance to alter the order states.
    drupal_alter('crm_channel_status_info', $statuses);

    uasort($statuses, 'drupal_sort_weight');
  }

  // Apply conditions to the returned statuses if specified.
  if (!empty($conditions)) {
    $matching_statuses = array();

    foreach ($statuses as $name => $status) {
      // Check the status against the conditions array to determine whether to
      // add it to the return array or not.
      $valid = TRUE;

      foreach ($conditions as $property => $value) {
        // If the current value for the specified property on the status does
        // not match the filter value...
        if ($status[$property] != $value) {
          // Do not add it to the temporary array.
          $valid = FALSE;
        }
      }

      if ($valid) {
        $matching_statuses[$name] = $status;
      }
    }

    return $matching_statuses;
  }

  return $statuses;
}

/**
 * Returns status label.
 *
 * @param $status
 * @return null
 */
function crm_channel_status_get_name($status) {
  $statuses = crm_channel_statuses();
  if (isset($statuses[$status]['title'])) {
    return $statuses[$status]['title'];
  }
  return NULL;
}

/**
 * Returns list of available statuses in #options format.
 *
 * @see hook_options_list()
 */
function crm_channel_status_option_list() {
  $states = crm_channel_states();
  $statuses = crm_channel_statuses();
  $options = array();
  foreach ($states as $k => $state) {
    foreach ($statuses as $j => $status) {
      if ($status['state'] == $k) {
        $options[$state['title']][$j] = $status['title'];
      }
    }
  }
  return $options;
}

/**
 * List of statuses flatten.
 */
function crm_channel_status_option_list_flatten() {
  return options_array_flatten(crm_channel_status_option_list());
}

/**
 * Returns list of types (bundles) in key => title format.
 *
 * @return array
 */
function crm_channel_types($reset = FALSE) {
  // First check the static cache for a product types array.
  $channel_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($channel_types) || $reset) {
    if ($reset) {
      entity_info_cache_clear();
    }
    $channel_types = array();

    $entity = entity_get_info('crm_channel');
    if (isset($entity['bundles'])) {
      foreach ($entity['bundles'] as $key => $bundle) {
        $channel_types[$key] = $bundle;
      }
    }
  }

  return $channel_types;
}

/**
 * @param bool $reset
 * @return array
 */
function crm_channel_type_option_list($reset = FALSE) {
  // First check the static cache for a product types array.
  $channel_types = &drupal_static(__FUNCTION__);
  // If it did not exist, fetch the types now.
  if (!isset($channel_types) || $reset) {
    $channel_types = crm_channel_types($reset);
    foreach ($channel_types as $key => $bundle) {
      $channel_types[$key] = $bundle['label'];
    }
  }

  return $channel_types;
}

/**
 * Returns name of type (bundle).
 */
function crm_channel_type_get_name($type) {
  $channels = crm_channel_type_option_list();
  if (isset($channels[$type])) {
    return $channels[$type];
  }
  return NULL;
}

/**
 * Getter function which returns channel independent value.
 *
 * @param $channel
 * @return string
 *
 * @deprecated Use entity label instead.
 */
function crm_channel_channel($channel) {
  $entity = entity_get_info('crm_channel');
  if (!isset($channel->type) || !isset($entity['bundles'][$channel->type]['module'])) {
    return NULL;
  }
  $module = $entity['bundles'][$channel->type]['module'];
  if ($value = module_invoke($module, 'crm_channel_label', $channel)) {
    return $value;
  }
  return NULL;
}

/**
 * @param $channel
 * @param $value
 * @return bool
 */
function crm_channel_set_value(&$channel, $value) {
  $entity = entity_get_info('crm_channel');
  if (!isset($channel->type) || !isset($entity['bundles'][$channel->type]['module'])) {
    return FALSE;
  }
  // Getting module name.
  $module = $entity['bundles'][$channel->type]['module'];
  // Check if module implements hook.
  $function = $module . '_crm_channel_set_value';
  if (!function_exists($function)) {
    return FALSE;
  }
  // Avoide module_invoke to pass arguments by reference.
  if ($return = $function($channel, $value)) {
    return $return;
  }
  return FALSE;
}

/**
 * Checks if channel is unique.
 *
 * @param $bundle
 * @param $channel
 * @return bool|mixed
 */
function crm_channel_is_unique($bundle, $channel, $new = TRUE) {
  $entity = entity_get_info('crm_channel');
  if (!isset($entity['bundles'][$bundle]['module'])) {
    return FALSE;
  }
  $module = $entity['bundles'][$bundle]['module'];
  if (!function_exists($module . '_crm_channel_is_unique')) {
    return FALSE;
  }
  return module_invoke($module, 'crm_channel_is_unique', $channel, $new = TRUE);
}

/**
 * Checks if channel is empty.
 *
 * @param $bundle
 * @param $channel
 * @return bool|mixed
 */
function crm_channel_is_empty($bundle, $channel) {
  $entity = entity_get_info('crm_channel');
  if (!isset($entity['bundles'][$bundle]['module'])) {
    return FALSE;
  }
  $module = $entity['bundles'][$bundle]['module'];
  if (!function_exists($module . '_crm_channel_is_empty')) {
    return FALSE;
  }
  return module_invoke($module, 'crm_channel_is_empty', $channel);
}

/**
 * @param $channel
 */
function crm_channel_token_access_callback($channel) {
  if (isset($channel->token) && isset($channel->token_created) && (REQUEST_TIME - $channel->token_created < CRM_CHANNEL_TOKEN_VALIDATION_INTERVAL)) {
    return TRUE;
  }
  drupal_set_message(t('One-time link expired.'), 'warning', FALSE);
  return FALSE;
}

/**
 * Implements hook_crm_channel_presave().
 */
function crm_channel_crm_channel_presave($channel) {

}

/**
 * Generates unique token.
 */
function _crm_channel_generate_token($channel) {
  $channel->token_created = REQUEST_TIME;
  $channel->token = drupal_hash_base64(drupal_random_bytes(64));
}

/**
 *
 */
function crm_channel_fields_info() {
  $fields = module_invoke_all('crm_channel_fields_info');
  drupal_alter('crm_channel_fields_info', $fields);
  return $fields;
}

/**
 * Implements hook_modules_installed().
 */
function crm_channel_modules_installed($modules) {
  crm_channel_install_fields(crm_channel_fields_info());
}

/**
 * @param $array
 * @throws \Exception
 * @throws \FieldException
 */
function crm_channel_install_fields($array) {

  entity_info_cache_clear();
  field_cache_clear();

  // Be sure that fields and instances elements are there.
  $default['fields'] = array();
  $default['instances'] = array();
  $array += $default;
  foreach ($array['fields'] as $field) {
    if (!field_info_field($field['field_name'])) {
      field_create_field($field);
    }
  }
  foreach ($array['instances'] as $instance) {
    if (!field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_modules_uninstalled().
 */
function crm_channel_modules_uninstalled($modules) {
  $types = crm_channel_types();
  $list = module_list();

  // First remove support for all uninstalled modules (if channel is still
  // there).
  // Get channel one by one.
  foreach ($types as $key => $bundle) {
    // Then get uninstalled modules - one by one.
    foreach ($modules as $module) {
      // Then check if module is on the list (only if module implements hook).
      if ($fields = module_invoke($bundle['module'], 'crm_channel_fields', $module)) {
        // If correct - uninstall all fields.
        crm_channel_uninstall_fields($fields);
      }
    }
  }

  // What if chanel module is on the list?
  // Make also a full list, including uninstalled modules.
  $list_full = $list + drupal_map_assoc($modules);
  // Get all uninstalled modules, one by one.
  foreach ($modules as $module) {
    // Load module file.
    module_load_include('module', $module);
    // Check if module implements hook_crm_channel_fields.
    if (function_exists($module . '_crm_channel_fields')) {
      // If yes, get all modules, including uninstalled one.
      foreach ($list_full as $to_uninstall) {
        // Check if implementation of hook returns some fields for this module.
        if ($fields = call_user_func_array($module . '_crm_channel_fields', array($to_uninstall))) {
          // If yes - remove all fields.
          crm_channel_uninstall_fields($fields);
        }
      }
    }
  }
}

/**
 * @param $array
 * @throws \Exception
 * @throws \FieldException
 */
function crm_channel_uninstall_fields($array) {
  foreach ($array['instances'] as $instance) {
    if (field_info_instance($instance['entity_type'], $instance['field_name'], $instance['bundle'])) {
      field_delete_instance($instance);
    }
  }
}

/**
 * Removes all inactive channels from array.
 *
 * @param $channels
 *   Array of channels.
 *
 * @return array
 *   Filtered array of channels.
 */
function crm_channel_filter_inactive($channels) {
  $channels = array_filter($channels, function ($channel) {
    if (empty($channel)) {
      return FALSE;
    }
    if (in_array($channel->status, array_keys(crm_channel_statuses(array('state' => CRM_CHANNEL_STATE_DISABLED))))) {
      return FALSE;
    }
    return TRUE;
  });
  return $channels;
}
