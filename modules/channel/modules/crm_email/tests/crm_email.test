<?php

/**
 * Tests basic CRM functions.
 */
class CRMEmailTestCase extends CRMBaseTestCase {

  /**
   * Info about test case.
   */
  public static function getInfo() {
    return array(
      'name' => 'CRM Email',
      'description' => 'CRM Email interface accessibility.',
      'group' => 'crm',
    );
  }

  /**
   * Setup test case.
   */
  function setUp() {
    $admin_permissions = array(
      'crm channel overview',
      'crm channel create',
      'crm channel update',
      'crm channel delete',
      'crm channel view',
    );
    $this->admin_permissions = $this->mergePermissions($this->admin_permissions, $admin_permissions);

    parent::setUp('crm_channel_ui', 'crm_email');

    $this->drupalLogin($this->admin);
  }

  /**
   * Tests the interface accessibility.
   */
  function testInterfaceAccessibility() {

    // Creates random email channel.
    $channel = $this->createRandomEmailChannel();
    $uri = entity_uri('crm_channel', $channel);

    // Login with normal user.
    $this->drupalLogin($this->user);
    $this->drupalGet('admin/crm/channel/add/email');
    $this->assertResponse(403, t('Normal user is not able to access the add page'));

    $this->drupalGet($uri['path'] . '/view');
    $this->assertResponse(403, t('Normal user is not able to view channel'));

    $this->drupalGet($uri['path'] . '/edit');
    $this->assertResponse(403, t('Normal user is not able to edit channel'));

    $this->drupalGet($uri['path'] . '/delete');
    $this->assertResponse(403, t('Normal user is not able to delete channel'));

    // Login with store admin.
    $this->drupalLogin($this->admin);

    $this->drupalGet('admin/crm/channel/add');
    $this->assertResponse(200, t('Admin user is not able to access the add page'));
    $this->assertText(t('E-mail'), t('%title title present in the add page', array('%title' => t('E-mail'))));

    $this->drupalGet('admin/crm/channel/add/email');
    $this->assertResponse(200, t('Admin user is not able to access the email add page'));
  }

  /**
   * Tests new channel form.
   */
  function testAddEmailChannel() {
    // Create a Email channel.
    $edit = array();
    $langcode = LANGUAGE_NONE;
    $edit["crm_email[$langcode][0][email]"] = $this->randomEmail();
    $edit["status"] = CRM_CHANNEL_STATUS_UNREGISTERED;
    $edit["log"] = $this->randomString(32);
    $this->drupalPost('admin/crm/channel/add/email', $edit, t('Save'));

    // Check that the Basic page has been created.
    $this->assertRaw(t('Channel @label has been saved', array('@label' => $edit["crm_email[$langcode][0][email]"])));
  }

  /**
   * Tests channel page.
   */
  function testViewEmailChannel() {
    $channel = $this->createRandomEmailChannel();
    $uri = entity_uri('crm_channel', $channel);

    $this->drupalGet($uri['path'] . '/view');
    $this->assertResponse(200);

    $this->assertRaw(entity_label('crm_channel', $channel));
  }

  /**
   * Tests edit form.
   */
  function testEditEmailChannel() {
    $channel = $this->createRandomEmailChannel();
    $wrapper = entity_metadata_wrapper('crm_channel', $channel);
    $uri = entity_uri('crm_channel', $channel);
    $this->drupalGet($uri['path'] . '/edit');
    $this->assertResponse(200);

    $langcode = LANGUAGE_NONE;
    $this->assertFieldByName("crm_email[$langcode][0][email]", $wrapper->crm_email->value(), t('Email address match'));

    $edit = array();
    $edit["crm_email[$langcode][0][email]"] = $this->randomEmail();
    $edit["status"] = CRM_CHANNEL_STATUS_UNREGISTERED;
    $edit["log"] = $this->randomString(32);
    $this->drupalPost('admin/crm/channel/' . $channel->channel_id . '/edit', $edit, t('Save'));

    // Check that the Basic page has been created.
    $this->assertRaw(t('Channel @label has been saved.', array('@label' => $edit["crm_email[$langcode][0][email]"])));

  }

  /**
   * Tests delete form.
   */
  function testDeleteEmailChannel() {
    $channel = $this->createRandomEmailChannel();
    $uri = entity_uri('crm_channel', $channel);

    $this->drupalGet($uri['path'] . '/delete');
    $this->assertResponse(200);

    $this->drupalPost($uri['path'] . '/delete', array(), t('Confirm'));

    $this->assertRaw(t('Channel @label has been deleted.', array('@label' => crm_channel_label($channel))));
  }

  /**
   * Creates new, random email channel.
   *
   * @param array $values
   *   Values array, leave it empty if you want to use default values.
   *
   * @return object
   *   Channel object.
   */
  function createRandomEmailChannel($values = array()) {
    $values += array(
      'mail' => $this->randomEmail(),
      'log' => $this->randomString(),
    );
    $channel = entity_create('crm_channel', array(
      'type' => 'email',
    ));
    crm_channel_set_value($channel, $values['mail']);
    $channel->log = $values['log'];
    entity_save('crm_channel', $channel);
    return $channel;
  }

  /**
   * Random email address.
   *
   * @return string
   *   Random, valid email address.
   */
  function randomEmail() {
    return $this->randomName() . '@' . $this->randomName() . '.' . $this->randomName(2);
  }

}
