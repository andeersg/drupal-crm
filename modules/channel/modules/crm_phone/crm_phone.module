<?php

/**
 * @file
 * Phone channel.
 *
 * Provides set of hook implementations for all submodules shipped with CRM
 * module.
 */

/**
 * Implements hook_entity_info_alter().
 */
function crm_phone_entity_info_alter(&$entity_info) {
  $bundle = array(
    'label' => t('Phone'),
    'module' => 'crm_phone',
  );
  $entity_info['crm_channel']['bundles']['phone'] = $bundle;
  if (isset($entity_info['crm_message'])) {
    $entity_info['crm_message']['bundles']['phone'] = $bundle;
  }
  if (isset($entity_info['crm_message_template'])) {
    $entity_info['crm_message_template']['bundles']['phone'] = $bundle;
  }
}

/**
 * Implements hook_crm_channel_is_unique().
 */
function crm_phone_crm_channel_is_unique($channel, $new = TRUE) {
  $wrapper = entity_metadata_wrapper('crm_channel', $channel);

  if (!$wrapper->__isset('crm_phone')) {
    return FALSE;
  }
  if (!($value = $wrapper->crm_phone->value())) {
    return FALSE;
  }
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'crm_channel')
    ->entityCondition('bundle', 'phone')
    ->fieldCondition('crm_phone', 'value', $value, '=');

  $result = $query->execute();
  if (!isset($result['crm_channel'])) {
    return TRUE;
  }
  elseif (isset($result['crm_channel']) && count($result['crm_channel']) == 0 && $new == TRUE) {
    return TRUE;
  }
  elseif (isset($result['crm_channel']) && count($result['crm_channel']) == 1 && $new == FALSE) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_crm_channel_is_empty().
 */
function crm_phone_crm_channel_is_empty($channel) {
  $wrapper = entity_metadata_wrapper('crm_channel', $channel);
  if (!$wrapper->__isset('crm_phone')) {
    return TRUE;
  }
  if (!($value = $wrapper->crm_phone->value())) {
    return TRUE;
  }
  if (!$value) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_crm_reference_search_field_info().
 */
function crm_phone_crm_reference_search_field_info() {
  return array(
    'crm_channel' => array(
      'phone' => array(
        'crm_phone' => array(
          'name' => 'crm_phone',
          'column' => 'value',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_crm_channel_values_load().
 */
function crm_phone_crm_channel_values_load($channel) {
  $wrapper = entity_metadata_wrapper('crm_channel', $channel);

  // Throw error if there is no crm_phone field or value for the
  // field.
  if (!$wrapper->__isset('crm_phone')) {
    throw new Exception('Missing crm_phone property.');
  }
  if (!($value = $wrapper->crm_phone->value())) {
    throw new Exception('Missing crm_phone property value.');
  }

  // Search for channel.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'crm_channel')
    ->entityCondition('bundle', 'phone')
    ->fieldCondition('crm_phone', 'value', $value, '=');
  $result = $query->execute();

  // Return only one channel at maximum.
  if (isset($result['crm_channel']) && !empty($result['crm_channel'])) {
    return entity_load_single('crm_channel', key($result['crm_channel']));
  }
  // Otherwise return NULL.
  return NULL;
}

/**
 * Implements hook_crm_message_crm_channel_fields_info_alter().
 */
function crm_phone_crm_message_crm_channel_fields_info_alter(&$fields) {
  // Prepare fields.
  $fields['fields']['crm_message_phone_body'] = array(
    'settings' => array(),
    'field_name' => 'crm_message_phone_body',
    'type' => 'text_long',
    'module' => 'text',
    'active' => 1,
    'locked' => 0,
    'cardinality' => 1,
    'deleted' => 0,
  );
  // Prepare instances.
  $fields['instances']['crm_message_phone_body'] = array(
    'label' => t('Body'),
    'widget' => array(
      'weight' => '3',
      'type' => 'text_textarea',
      'module' => 'text',
      'active' => 1,
      'settings' => array(
        'rows' => '5',
      ),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'text_default',
        'settings' => array(),
        'module' => 'text',
        'weight' => 2,
      ),
    ),
    'required' => 1,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'crm_message_phone_body',
    'entity_type' => 'crm_message',
    'bundle' => 'phone',
    'deleted' => 0,
  );
}

/**
 * Implements hook_crm_message_template_crm_channel_fields_info_alter().
 */
function crm_phone_crm_message_template_crm_channel_fields_info_alter(&$fields) {
  // Prepare instances.
  $fields['instances']['crm_message_template_phone_body'] = array(
    'label' => t('Body'),
    'widget' => array(
      'weight' => '3',
      'type' => 'text_textarea',
      'module' => 'text',
      'active' => 1,
      'settings' => array(
        'rows' => '5',
      ),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'text_default',
        'settings' => array(),
        'module' => 'text',
        'weight' => 2,
      ),
    ),
    'required' => 1,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'crm_message_phone_body',
    'entity_type' => 'crm_message_template',
    'bundle' => 'phone',
    'deleted' => 0,
  );
}

/**
 * Implements hook_crm_channel_set_value().
 */
function crm_phone_crm_channel_set_value(&$channel, $value) {
  $wrapper = entity_metadata_wrapper('crm_channel', $channel);
  if (!$wrapper->__isset('crm_phone')) {
    return FALSE;
  }
  $wrapper->crm_phone->set($value);
  return TRUE;
}

/**
 * Implements hook_views_default_views_alter().
 */
function crm_phone_views_default_views_alter(&$views) {
  if (isset($views['crm_channel'])) {
    $handler =& $views['crm_channel']->display['default']->handler;
    /* Field: Channel: Phone */
    $handler->display->display_options['fields']['crm_phone']['id'] = 'crm_phone';
    $handler->display->display_options['fields']['crm_phone']['table'] = 'field_data_crm_phone';
    $handler->display->display_options['fields']['crm_phone']['field'] = 'crm_phone';
    $handler->display->display_options['fields']['crm_phone']['label'] = '';
    $handler->display->display_options['fields']['crm_phone']['exclude'] = TRUE;
    $handler->display->display_options['fields']['crm_phone']['element_label_colon'] = FALSE;
    $handler->display->display_options['filters']['combine']['fields']['crm_phone'] = 'crm_phone';
  }
}

/**
 * Implements hook_message_create().
 */
function crm_phone_crm_message_create($values, $entity_type = 'crm_message') {
  try {
    $message = entity_create($entity_type, array(
      'type' => 'phone',
    ));
    $wrapper = entity_metadata_wrapper($entity_type, $message);
    if (isset($values['channel']) && $wrapper->__isset('crm_channel_single')) {
      $wrapper->crm_channel_single->set($values['channel']);
    }
    if (isset($values['body']) && $wrapper->__isset('crm_message_phone_body')) {
      $wrapper->crm_message_phone_body->set($values['body']);
    }
    foreach ($values as $key => $value) {
      if ($wrapper->__isset($key)) {
        $wrapper->{$key}->set($value);
      }
    }
  }
  catch (Exception $e) {
    watchdog_exception('crm_phone', $e);
    return FALSE;
  }
  return $message;
}
