<?php

/**
 * @file
 */

define('CRM_CAMPAIGN_STATUS_REGISTERED', 'registered');
define('CRM_CAMPAIGN_STATUS_QUEUED', 'queued');
define('CRM_CAMPAIGN_STATUS_SENT', 'sent');

module_load_include('inc', 'crm_campaign', 'crm_campaign.entity');

/**
 * Implements hook_menu().
 */
function crm_campaign_menu() {
  $items = array();

  $items['admin/crm/campaign/%crm_campaign'] = array(
    'title callback' => 'crm_campaign_label',
    'title arguments' => array(3),
    'page callback' => 'crm_campaign_view',
    'page arguments' => array(3),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('view', 3),
    'type' => MENU_CALLBACK,
  );

  $items['admin/crm/campaign/%crm_campaign/view'] = array(
    'title' => 'View',
    'page callback' => 'crm_campaign_view',
    'page arguments' => array(3),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('view', 3),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -2,
  );

  $items['admin/crm/campaign/%crm_campaign/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'crm_campaign_edit_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/crm_campaign.form.inc',
    'weight' => -1,
  );

  $items['admin/crm/campaign/%crm_campaign/send'] = array(
    'title' => 'Send',
    'page callback' => 'crm_campaign_send_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('send', 3),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/crm_campaign.form.inc',
    'weight' => 98,
  );

  $items['admin/crm/campaign/%crm_campaign/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'crm_campaign_delete_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('delete', 3),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/crm_campaign.form.inc',
    'weight' => 99,
  );

  $items['admin/crm/campaign/add'] = array(
    'title' => 'Add campaign',
    'page callback' => 'crm_campaign_add_form_wrapper',
    'page arguments' => array(),
    'access callback' => 'crm_campaign_access',
    'access arguments' => array('create'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/crm_campaign.form.inc',
  );

  $items['admin/crm/config/campaign'] = array(
    'title' => 'Campaign',
    'description' => 'Manage Campaign configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_campaign_settings'),
    'access arguments' => array('crm administer'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'crm_campaign.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_module_implements_alter().
 */
function crm_campaign_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'menu_alter') {
    $group = $implementations['crm_campaign'];
    unset($implementations['crm_campaign']);
    $implementations['crm_campaign'] = $group;
  }
}

/**
 * Implements hook_menu_alter().
 */
function crm_campaign_menu_alter(&$items) {
  foreach (crm_campaign_method_info() as $key => $method) {
    if (!isset($method['access path'])) {
      continue;
    }
    $items[$method['access path']]['access arguments'] = array(
      $items[$method['access path']]['access callback'],
      $items[$method['access path']]['access arguments'],
      $method['access path'],
      $method['access path argument position'],
    );
    $items[$method['access path']]['access callback'] = 'crm_campaign_method_access';
  }
}

/**
 * Implements hook_permission().
 */
function crm_campaign_permission() {
  return array(
    'crm campaign overview' => array(
      'title' => t('Access to campaign list'),
    ),
    'crm campaign create' => array(
      'title' => t('Create new campaign'),
    ),
    'crm campaign view' => array(
      'title' => t('View campaign'),
    ),
    'crm campaign update' => array(
      'title' => t('Update campaign'),
    ),
    'crm campaign delete' => array(
      'title' => t('Delete campaign'),
    ),
    'crm campaign send' => array(
      'title' => t('Send campaign'),
    ),
  );
}

/**
 * Implements hook_crm_channel_fields_info().
 */
function crm_campaign_crm_channel_fields_info() {
  $types = crm_channel_types(TRUE);
  $array = array();
  foreach ($types as $key => $bundle) {
    $array['instances'][$key . '_crm_campaign_single'] = array(
      'label' => t('Campaign'),
      'widget' => array(
        'weight' => '5',
        'type' => 'entityreference_autocomplete',
        'module' => 'entityreference',
        'active' => 1,
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'size' => '60',
          'path' => '',
        ),
      ),
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'entityreference_label',
          'weight' => 98,
          'settings' => array(
            'link' => 1,
          ),
          'module' => 'entityreference',
        ),
      ),
      'required' => 0,
      'description' => '',
      'default_value' => NULL,
      'field_name' => 'crm_campaign_single',
      'entity_type' => 'crm_message',
      'bundle' => $key,
      'deleted' => 0,
    );
  }
  drupal_alter('crm_campaign_crm_channel_fields_info', $array);
  return $array;
}

/**
 * Implements hook_cron().
 */
function crm_campaign_cron() {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'crm_campaign')
    ->propertyCondition('status', CRM_CAMPAIGN_STATUS_QUEUED, '=');

  $result = $query->execute();

  if (isset($result['crm_campaign'])) {
    foreach ($result['crm_campaign'] as $campaign_id => $campaign) {
      if (_crm_campaign_is_sent($campaign_id)) {
        try {
          $campaign = entity_load_single('crm_campaign', $campaign_id);
          $campaign->status = CRM_CAMPAIGN_STATUS_SENT;
          $campaign->log = 'Campaign has been sent';
          $campaign->revision = TRUE;
          entity_save('crm_campaign', $campaign);
        }
        catch (Exception $e) {
          watchdog_exception('crm_campaign', $e);
        }
      }
    }
  }
}

/**
 * Implements hook_action_info().
 */
function crm_campaign_action_info() {
  return array(
    'crm_campaign_add_to_campaign_action' => array(
      'type' => 'crm_channel',
      'label' => t('Add to Campaign'),
      'configurable' => TRUE,
      'permissions' => array('crm campaign update'),
      'aggregate' => TRUE,
      // Add fake behaviour to prevent entity save.
      'behavior' => array('null'),
    ),
    'crm_campaign_remove_from_campaign_action' => array(
      'type' => 'crm_channel',
      'label' => t('Remove from Campaign'),
      'configurable' => TRUE,
      'permissions' => array('crm campaign update'),
      'aggregate' => TRUE,
      // Add fake behaviour to prevent entity save.
      'behavior' => array('null'),
    ),
  );
}

/**
 * @return array
 */
function crm_campaign_crm_campaign_method_info() {
  $methods['crm_campaign_vbo'] = array(
    'name' => t('VBO'),
    'access path' => 'admin/crm/campaign/%/channel',
    'access path argument position' => 3,
    'auto' => FALSE,
  );
  return $methods;
}

/**
 * @return array
 */
function crm_campaign_method_info($method = NULL) {
  // First check the static cache for an array.
  $methods = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch it now.
  if (empty($methods)) {
    $methods = module_invoke_all('crm_campaign_method_info');

    // Give other modules a chance to alter the array.
    drupal_alter('crm_campaign_method_info', $methods);
  }

  if (isset($method)) {
    return isset($methods[$method]) ? $methods[$method] : NULL;
  }

  return $methods;
}

/**
 * Action form callback.
 */
function crm_campaign_add_to_campaign_action_form($settings, &$form_state) {
  $form = array();
  $form['campaign'] = array(
    '#type' => 'select',
    '#title' => t('Choose campaign'),
    '#options' => array(NULL => t('- Choose -')) + crm_campaign_option_list(CRM_CAMPAIGN_STATUS_REGISTERED),
    '#required' => TRUE,
    '#default_value' => isset($settings['view']->args[0]) ? $settings['view']->args[0] : NULL,
  );
  return $form;
}

/**
 * Action form submit handler.
 */
function crm_campaign_add_to_campaign_action_submit($form, $form_state) {
  $return = array();
  $return['crm_campaign'] = entity_load_single('crm_campaign', $form_state['values']['campaign']);
  return $return;
}

/**
 * Action callback: crm_campaign_add_to_campaign_action.
 */
function crm_campaign_add_to_campaign_action(&$entities, &$context) {
  try {
    $campaign = &$context['crm_campaign'];
    crm_campaign_add_channel_to_campaign($campaign, $entities);
    $campaign->revision = TRUE;
    $campaign->log = 'Campaign channels list has been updated';
    entity_save('crm_campaign', $campaign);
  }
  catch (Exception $e) {
    watchdog_exception('crm_campaign', $e);
    drupal_set_message('Unable to add channels to campaign.', 'error');
  }
}

/**
 * Compares lists and adds missing channels to campaign's crm_channel field.
 *
 * @param $campaign
 *   Campaign object passed by reference.
 * @param $channels
 *   Array of channels.
 */
function crm_campaign_add_channel_to_campaign(&$campaign, $channels) {
  $wrapper = entity_metadata_wrapper('crm_campaign', $campaign);
  $values = $wrapper->crm_channel->raw();
  $keys = array_keys($channels);
  $diff = array_diff($keys, $values);
  $values = array_merge($values, $diff);
  asort($values);
  $wrapper->crm_channel->set($values);
}

/**
 * Action form callback.
 */
function crm_campaign_remove_from_campaign_action_form($settings, &$form_state) {
  $form = array();
  $form['campaign'] = array(
    '#type' => 'select',
    '#title' => t('Choose campaign'),
    '#options' => array(NULL => t('- Choose -')) + crm_campaign_option_list(CRM_CAMPAIGN_STATUS_REGISTERED),
    '#required' => TRUE,
    '#default_value' => isset($settings['view']->args[0]) ? $settings['view']->args[0] : NULL,
  );
  return $form;
}

/**
 * Action form submit handler.
 */
function crm_campaign_remove_from_campaign_action_submit($form, $form_state) {
  $return = array();
  $return['crm_campaign'] = entity_load_single('crm_campaign', $form_state['values']['campaign']);
  return $return;
}

/**
 * Action callback: crm_campaign_remove_from_campaign_action.
 */
function crm_campaign_remove_from_campaign_action(&$entities, &$context) {
  try {
    $campaign = &$context['crm_campaign'];
    crm_campaign_remove_channel_from_campaign($campaign, $entities);
    $campaign->log = 'Campaign channels list has been updated.';
    $campaign->revision = TRUE;
    entity_save('crm_campaign', $campaign);
  }
  catch (Exception $e) {
    watchdog_exception('crm_campaign', $e);
    drupal_set_message('Unable to add channels to campaign.', 'error');
  }
}

/**
 * Compares and removes channels from campaign.
 *
 * @param $campaign
 *   Campaign object passed by reference.
 * @param $channels
 *   Array of channels.
 */
function crm_campaign_remove_channel_from_campaign(&$campaign, $channels) {
  $wrapper = entity_metadata_wrapper('crm_campaign', $campaign);
  $values = $wrapper->crm_channel->raw();
  $keys = array_keys($channels);
  $values = array_diff($values, $keys);
  asort($values);
  $wrapper->crm_channel->set($values);
}

/**
 * Implements hook_views_api().
 */
function crm_campaign_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_campaign') . '/includes/views',
  );
}

/**
 * Implements hook_crm_campaign_status_info().
 */
function crm_campaign_crm_campaign_status_info() {
  $status = array();

  $status[CRM_CAMPAIGN_STATUS_REGISTERED] = array(
    'title' => t('Registered'),
    'description' => t('Registered, unprocessed campaign'),
    'weight' => -99,
  );

  $status[CRM_CAMPAIGN_STATUS_QUEUED] = array(
    'title' => t('Queued'),
    'description' => t('Campaign queued to send.'),
    'weight' => 0,
  );

  $status[CRM_CAMPAIGN_STATUS_SENT] = array(
    'title' => t('Sent'),
    'description' => t('Fully sent campaign.'),
    'weight' => 99,
  );

  return $status;
}

/**
 * Returns all statuses campaign declared by modules.
 *
 * @return array
 *   List of statuses
 */
function crm_campaign_statuses() {
  // First check the static cache for an order states array.
  $statuses = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the statuses now.
  if (empty($statuses)) {
    $statuses = module_invoke_all('crm_campaign_status_info');

    // Give other modules a chance to alter the order states.
    drupal_alter('crm_campaign_status_info', $statuses);

    uasort($statuses, 'drupal_sort_weight');
  }

  return $statuses;
}

/**
 * Returns status label.
 *
 * @param $status
 * @return null
 */
function crm_campaign_status_get_name($status) {
  $statuses = crm_campaign_statuses();
  if (isset($statuses[$status]['title'])) {
    return $statuses[$status]['title'];
  }
  return NULL;
}

/**
 * Returns list of available statuses.
 */
function crm_campaign_status_options_list() {

  $options = array();

  foreach (crm_campaign_statuses() as $key => $status) {
    $options[$key] = $status['title'];
  }

  return $options;
}

/**
 * Returns list of all campaigns.
 *
 * @param null $status
 *   Campaign status.
 *
 * @return null|array
 *   List of campaign objects or NULL if nothing found.
 */
function crm_campaign_campaigns($status = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'crm_campaign');
  if ($status) {
    $query->propertyCondition('status', $status);
  }
  $query->propertyOrderBy('title', 'ASC')
    ->addTag('crm_campaign_campaigns')
    ->addMetaData('status', $status);

  $result = $query->execute();
  if (!isset($result['crm_campaign'])) {
    return NULL;
  }
  return entity_load('crm_campaign', array_keys($result['crm_campaign']));
}

/**
 * Returns list of campaigns in a option list format (key => value pairs).
 *
 * @param string $status
 *   Campaign status.
 *
 * @todo There is no need to load objects. Do simple query to load only titles
 * and ids.
 */
function crm_campaign_option_list($status = NULL) {
  $array = array();
  if (!($campaigns = crm_campaign_campaigns($status))) {
    return $array;
  }
  foreach ($campaigns as $campaign) {
    $array[$campaign->campaign_id] = $campaign->title;
  }
  return $array;
}

/**
 * Implements hook_form_alter().
 */
function crm_campaign_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['crm_campaign_single']) && isset($form['#entity_type']) && $form['#entity_type'] == 'crm_message') {
    // Hide all occurrences of crm_message_template field.
    $form['crm_campaign_single']['#access'] = FALSE;
  }
}

/**
 * Manipulates object by populating crm_channel field value.
 *
 * @param $campaign
 *   Campaign entity. Passed by reference.
 */
function crm_campaign_prepopulate_channel(&$campaign) {
  if (!isset($campaign->data['manage_recipients']['methods'])) {
    return;
  }
  if (empty($campaign->data['manage_recipients']['methods'])) {
    return;
  }
  if (!is_array($campaign->data['manage_recipients']['methods'])) {
    return;
  }
  if (isset($campaign->data['manage_recipients']['rebuild']) && !$campaign->data['manage_recipients']['rebuild']) {
    return;
  }
  if (isset($campaign->data['manage_recipients']['rebuild']) && $campaign->data['manage_recipients']['rebuild'] && isset($campaign->data['manage_recipients']['remove']) && $campaign->data['manage_recipients']['remove']) {
    try {
      $wrapper = entity_metadata_wrapper('crm_campaign', $campaign);
      $wrapper->crm_channel->set(NULL);
    }
    catch (Exception $e) {
      watchdog_exception('crm_campaign', $e);
      return;
    }
  }
  $methods = crm_campaign_method_info();
  uasort($campaign->data['manage_recipients']['methods'], 'drupal_sort_weight');
  foreach ($campaign->data['manage_recipients']['methods'] as $method => $options) {
    if (!isset($methods[$method]['auto']) || !isset($methods[$method]['method callback']) || !isset($methods[$method]['method defaults']) || !$methods[$method]['auto']) {
      continue;
    }
    if (function_exists($methods[$method]['method callback'])) {
      $options += $methods[$method]['method defaults'];
      $methods[$method]['method callback']($campaign, $options);
    }
  }
}

/**
 * Gets form implemetation based on 'method form' property or forms namespace.
 *
 * If form does not exist or is not needed at all return dummy empty array.
 *
 * @param $method
 *   Method key.
 * @param array $options
 *   Arrays with custom options. Default values will be added here.
 *
 * @return array
 *   Form array. At least dummy element of type 'value' to preserve data
 *   structure.
 */
function crm_campaign_method_get_form($method, $options = array()) {
  $method_key = $method;
  $method = crm_campaign_method_info($method);
  if (isset($method['method defaults'])) {
    $options += $method['method defaults'];
  }
  if (isset($method['method form']) && function_exists($method['method form'])) {
   $form = $method['method form']($options);
  }
  elseif ($form = module_invoke_all('crm_campaign_method_' . $method_key . '_form', $options)) {
    // If form is not empty skip else.
  }
  else {
    $form = array(
      '#type' => 'value',
      '#value' => array(),
    );
    return $form;
  }
  return array(
    '#type' => 'fieldset',
    '#title' => $method['name'],
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ) + $form;
}

/**
 * Evaluate if user should have access to the page.
 *
 * @param $callback
 *   Parent callback.
 * @param $arguments
 *   Parent arguments.
 * @param $path
 *   Path to page.
 * @param $campaign
 *   Campaign entity.
 *
 * @return bool|mixed
 *   TRUE/FALSE.
 */
function crm_campaign_method_access($callback, $arguments, $path, $campaign) {
  if (is_numeric($campaign)) {
    $campaign = entity_load_single('crm_campaign', $campaign);
  }

  if (!isset($campaign->data['manage_recipients']['methods'])) {
    return call_user_func_array($callback, $arguments);
  }
  if (empty($campaign->data['manage_recipients']['methods'])) {
    return call_user_func_array($callback, $arguments);
  }
  if (!is_array($campaign->data['manage_recipients']['methods'])) {
    return call_user_func_array($callback, $arguments);
  }
  $methods = crm_campaign_method_info();
  uasort($campaign->data['manage_recipients']['methods'], 'drupal_sort_weight');
  foreach ($campaign->data['manage_recipients']['methods'] as $method => $options) {
    if (isset($methods[$method]['access path']) && $methods[$method]['access path'] == $path) {
      return call_user_func_array($callback, $arguments);
    }
  }

  return FALSE;
}

/**
 * Returns boolean value which indicates if channel is on the campaign recipient
 * list or not.
 *
 * @param $campaign
 *   Campaign object.
 * @param $channel_id
 *   Channel ID.
 *
 * @return bool
 *   TRUE or FALSE.
 */
function crm_campaign_channel_exists($campaign, $channel_id) {
  try {
    $wrapper = entity_metadata_wrapper('crm_campaign', $campaign);
    return in_array($channel_id, $wrapper->crm_channel->raw());
  }
  catch (Exception $e) {
    watchdog_exception('crm_campaign', $e);
    return FALSE;
  }
}

/**
 * Adds channel to campaign entity.
 *
 * @param $campaign
 * @param $channel
 * @return bool
 */
function crm_campaign_add_channel(&$campaign, $channel) {
  if (crm_campaign_channel_exists($campaign, $channel->channel_id)) {
    return TRUE;
  }
  try {
    $wrapper = entity_metadata_wrapper('crm_campaign', $campaign);
    $wrapper->crm_channel[] = $channel;
    return TRUE;
  }
  catch (Exception $e) {
    watchdog_exception('crm_campaign', $e);
    return FALSE;
  }
}

/**
 * Removes channel from campaign entity.
 *
 * @param $campaign
 * @param $channel_id
 * @return bool
 */
function crm_campaign_remove_channel(&$campaign, $channel_id) {
  if (!crm_campaign_channel_exists($campaign, $channel_id)) {
    return TRUE;
  }
  try {
    $wrapper = entity_metadata_wrapper('crm_campaign', $campaign);
    $key = array_search($channel_id, $campaign->crm_channel->raw());
    unset($wrapper->crm_channel[$key]);
    return TRUE;
  }
  catch (Exception $e) {
    watchdog_exception('crm_campaign', $e);
    return FALSE;
  }
}

/**
 * @param $campaign
 * @return bool
 */
function _crm_campaign_is_sent($campaign_id) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'crm_message')
    ->propertyCondition('status', CRM_CAMPAIGN_STATUS_SENT, '<>')
    ->fieldCondition('crm_campaign_single', 'target_id', $campaign_id, '=');

  $result = $query->execute();
  if (!isset($result['crm_message']) || !count($result['crm_message'])) {
    return TRUE;
  }
  return FALSE;
}