<?php

/**
 * @file
 *
 */

define('MICRO_CRM_CHANNEL_STATUS_REGISTERED', 'registered');
define('MICRO_CRM_CHANNEL_STATUS_UNREGISTERED', 'unregistered');
define('MICRO_CRM_CHANNEL_STATE_ACTIVE', 'active');
define('MICRO_CRM_CHANNEL_STATE_DISABLED', 'disabled');
define('MICRO_CRM_CHANNEL_TOKEN_VALIDATION_INTERVAL', 86400);

module_load_include('inc', 'micro_crm_channel', 'micro_crm_channel.entity');

/**
 * Implements hook_hook_info().
 */
function micro_crm_channel_hook_info() {
  $hooks = array(
    'micro_crm_channel_state_info' => array(
      'group' => 'micro_crm',
    ),
    'micro_crm_channel_state_info_alter' => array(
      'group' => 'micro_crm',
    ),
    'micro_crm_channel_status_info' => array(
      'group' => 'micro_crm',
    ),
    'micro_crm_channel_status_info_alter' => array(
      'group' => 'micro_crm',
    ),
    'micro_crm_channel_view' => array(
      'group' => 'micro_crm',
    ),
    'micro_crm_channel_presave' => array(
      'group' => 'micro_crm',
    ),
    'micro_crm_channel_update' => array(
      'group' => 'micro_crm',
    ),
    'micro_crm_channel_insert' => array(
      'group' => 'micro_crm',
    ),
    'micro_crm_channel_delete' => array(
      'group' => 'micro_crm',
    ),
    'micro_crm_channel_channel' => array(
      'group' => 'micro_crm',
    ),
    'micro_crm_channel_is_unique' => array(
      'group' => 'micro_crm',
    ),
    'micro_crm_channel_is_empty' => array(
      'group' => 'micro_crm',
    ),
  );
  return $hooks;
}

/**
 * Implements hook_micro_crm_channel_state_info().
 */
function micro_crm_channel_micro_crm_channel_state_info() {
  $states = array();

  $states[MICRO_CRM_CHANNEL_STATE_DISABLED] = array(
    'title' => t('Disabled'),
    'description' => t('Disabled channel, we can track it but we cannot communicate.'),
    'weight' => -1,
  );
  $states[MICRO_CRM_CHANNEL_STATE_ACTIVE] = array(
    'title' => t('Active'),
    'description' => t('Active channel, we can track it and communicate.'),
    'weight' => 1,
  );

  return $states;
}

/**
 * Returns all statuses contact declared by modules.
 *
 * @return array
 *   List of statuses
 */
function micro_crm_channel_states() {
  // First check the static cache for an order states array.
  $states = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the statuses now.
  if (empty($states)) {
    $states = module_invoke_all('micro_crm_channel_state_info');

    // Give other modules a chance to alter the order states.
    drupal_alter('micro_crm_channel_state_info', $states);

    uasort($states, 'drupal_sort_weight');
  }

  return $states;
}

/**
 * Implements hook_micro_crm_channel_status_info().
 */
function micro_crm_channel_micro_crm_channel_status_info() {
  $status = array();

  $status[MICRO_CRM_CHANNEL_STATUS_UNREGISTERED] = array(
    'title' => t('Unregistered'),
    'state' => MICRO_CRM_CHANNEL_STATE_DISABLED,
    'weight' => -99,
  );

  $status[MICRO_CRM_CHANNEL_STATUS_REGISTERED] = array(
    'title' => t('Registered'),
    'description' => t('Registered, unprocessed channel'),
    'state' => MICRO_CRM_CHANNEL_STATE_ACTIVE,
    'weight' => -99,
  );

  return $status;
}

/**
 * Returns all statuses contact declared by modules.
 *
 * @return array
 *   List of statuses
 */
function micro_crm_channel_statuses() {
  // First check the static cache for an order states array.
  $statuses = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the statuses now.
  if (empty($statuses)) {
    $statuses = module_invoke_all('micro_crm_channel_status_info');

    // Give other modules a chance to alter the order states.
    drupal_alter('micro_crm_channel_status_info', $statuses);

    uasort($statuses, 'drupal_sort_weight');
  }

  return $statuses;
}

/**
 * Returns list of available statuses in #options format.
 *
 * @see hook_options_list()
 */
function micro_crm_channel_status_option_list() {
  $states = micro_crm_channel_states();
  $statuses = micro_crm_channel_statuses();
  $options = array();
  foreach ($states as $k => $state) {
    foreach ($statuses as $j => $status) {
      if ($status['state'] == $k) {
        $options[$state['title']][$j] = $status['title'];
      }
    }
  }
  return $options;
}

/**
 * Returns list of types (bundles) in key => title format.
 *
 * @return array
 */
function micro_crm_channel_types() {
  // First check the static cache for a product types array.
  $channel_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($channel_types)) {
    $channel_types = array();

    $entity = entity_get_info('micro_crm_channel');
    if (isset($entity['bundles'])) {
      foreach ($entity['bundles'] as $key => $bundle) {
        // @todo: add something here or simplify it.
        $channel_types[$key] = $bundle['label'];
      }
    }
  }

  return $channel_types;
}

/**
 * Getter function which returns channel independent value.
 *
 * @param $channel
 * @return string
 *
 * @deprecated Use entity label instead.
 */
function micro_crm_channel_channel($channel) {
  $entity = entity_get_info('micro_crm_channel');
  if (!isset($channel->type) || !isset($entity['bundles'][$channel->type]['module'])) {
    return NULL;
  }
  $module = $entity['bundles'][$channel->type]['module'];
  if ($value = module_invoke($module, 'micro_crm_channel_channel', $channel)) {
    return $value;
  }
  return NULL;
}

/**
 * @param $channel
 * @param $value
 * @return bool
 */
function micro_crm_channel_set_value(&$channel, $value) {
  $entity = entity_get_info('micro_crm_channel');
  if (!isset($channel->type) || !isset($entity['bundles'][$channel->type]['module'])) {
    return FALSE;
  }
  // Getting module name.
  $module = $entity['bundles'][$channel->type]['module'];
  // Check if module implements hook.
  $function = $module . '_micro_crm_channel_set_value';
  if (!function_exists($function)) {
    return FALSE;
  }
  // Avoide module_invoke to pass arguments by reference.
  if ($return = $function($channel, $value)) {
    return $return;
  }
  return FALSE;
}

/**
 * Checks if channel is unique.
 *
 * @param $bundle
 * @param $channel
 * @return bool|mixed
 */
function micro_crm_channel_is_unique($bundle, $channel, $new = TRUE) {
  $entity = entity_get_info('micro_crm_channel');
  if (!isset($entity['bundles'][$bundle]['module'])) {
    return FALSE;
  }
  $module = $entity['bundles'][$bundle]['module'];
  if (!function_exists($module . '_micro_crm_channel_is_unique')) {
    return FALSE;
  }
  return module_invoke($module, 'micro_crm_channel_is_unique', $channel, $new = TRUE);
}

/**
 * Checks if channel is empty.
 *
 * @param $bundle
 * @param $channel
 * @return bool|mixed
 */
function micro_crm_channel_is_empty($bundle, $channel) {
  $entity = entity_get_info('micro_crm_channel');
  if (!isset($entity['bundles'][$bundle]['module'])) {
    return FALSE;
  }
  $module = $entity['bundles'][$bundle]['module'];
  if (!function_exists($module . '_micro_crm_channel_is_empty')) {
    return FALSE;
  }
  return module_invoke($module, 'micro_crm_channel_is_empty', $channel);
}

/**
 * @param $channel
 */
function micro_crm_channel_token_access_callback($channel) {
  if (isset($channel->token) && isset($channel->token_created) && (REQUEST_TIME - $channel->token_created < MICRO_CRM_CHANNEL_TOKEN_VALIDATION_INTERVAL)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_micro_crm_channel_presave().
 */
function micro_crm_channel_micro_crm_channel_presave($channel) {

}

/**
 * Generates unique token.
 */
function _micro_crm_channel_generate_token($channel) {
  $channel->token_created = REQUEST_TIME;
  $channel->token = drupal_hash_base64(drupal_random_bytes(64));
}
