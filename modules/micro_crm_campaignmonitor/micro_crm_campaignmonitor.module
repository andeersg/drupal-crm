<?php

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function micro_crm_campaignmonitor_menu() {
  $items = array();

  $items['admin/people/micro_crm/config/newsletter/campaignmonitor'] = array(
    'title' => 'Campaign Monitor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('micro_crm_campaignmonitor_settings'),
    'access arguments' => array('micro crm manage'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'micro_crm_campaignmonitor.admin.inc',
  );

  $items['admin/people/micro_crm/config/newsletter/campaignmonitor/settings'] = array(
    'title' => 'Campaign Monitor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('micro_crm_campaignmonitor_settings'),
    'access arguments' => array('micro crm manage'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'micro_crm_campaignmonitor.admin.inc',
  );

  $items['admin/people/micro_crm/config/newsletter/campaignmonitor/webhooks'] = array(
    'title' => 'Webhooks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('micro_crm_campaignmonitor_webhooks'),
    'access arguments' => array('micro crm manage'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'micro_crm_campaignmonitor.admin.inc',
  );

  $items['micro_crm/newsletter/campaignmonitor/%'] = array(
    'page callback' => 'micro_crm_campaignmonitor_webhook',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function micro_crm_campaignmonitor_libraries_info() {
  $libraries['campaignmonitor'] = array(
    'name' => 'Campaign Monitor',
    'vendor url' => 'http://campaignmonitor.com',
    'download url' => 'https://github.com/campaignmonitor/createsend-php/zipball/master',
    'version' => 'master',
    'files' => array(
      'php' => array('csrest_general.php', 'csrest_clients.php', 'csrest_subscribers.php', 'csrest_lists.php'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_micro_crm_channel_update().
 */
function micro_crm_campaignmonitor_micro_crm_channel_update($channel) {
  // @todo process data and send to campaign monitor.
  if ($channel->type == 'email' && ((isset($channel->unsubscribe) && $channel->unsubscribe == TRUE) || $channel->status == MICRO_CRM_NEWSLETTER_CHANNEL_STATUS)) {
    $queue = DrupalQueue::get('micro_crm_campaignmonitor');
    $queue->createQueue();
    $queue->createItem($channel);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function micro_crm_campaignmonitor_cron_queue_info() {
  $queues['micro_crm_campaignmonitor'] = array(
    'worker callback' => 'micro_crm_campaignmonitor_sync',
    'time' => '30',
  );
  return $queues;
}

/**
 * Sync callback.
 */
function micro_crm_campaignmonitor_sync($channel_old) {

  if (isset($channel_old->campaignmonitor_webhook) && $channel_old->campaignmonitor_webhook == TRUE) {
    return FALSE;
  }

  // Load the latest version of channel.
  $channel = micro_crm_channel_load($channel_old->channel_id);

  // Compare if channel in queue is the latest one.
  if ($channel->revision_id > $channel_old->revision_id) {
    return FALSE;
  }
  $queue = DrupalQueue::get('micro_crm_campaignmonitor');

  // Load channel into wrapper.
  $wrapper = entity_metadata_wrapper('micro_crm_channel', $channel);
  // Load contact.
  $contact = micro_crm_channel_load_contact(array($channel->channel_id));

  // Connect to Campaign Monitor API.
  $cm = CampaignMonitor::getConnector();

  // Get e-mail address from channel object.
  $email = $wrapper->field_micro_crm_email->value();

  // Iterate all available lists.
  foreach (_micro_crm_campaignmonitor_get_lists() as $list_id) {

    // Check if e-mail is subscribed.
    if ($cm->isSubscribed($list_id, $email)) {
      if ($channel->status == MICRO_CRM_NEWSLETTER_CHANNEL_STATUS) {
        // Prepare custom fields.
        $custom_fields = _micro_crm_campaignmonitor_prepare_custom_fields($list_id, $contact);
        $name = _micro_crm_campaignmonitor_retrieve_name_from_custom_fields($custom_fields);
        // Update.
        if (!$cm->subscribe($list_id, $email, $name, array_values($custom_fields))) {
          $queue->createItem($channel);
        }
      }
      else {
        // Unsubscribe.
        if (!$cm->unsubscribe($list_id, $email)) {
          $queue->createItem($channel);
        }
      }
    }
    else {
      if ($channel->status == MICRO_CRM_NEWSLETTER_CHANNEL_STATUS) {
        // Prepare custom fields.
        $custom_fields = _micro_crm_campaignmonitor_prepare_custom_fields($list_id, $contact);
        $name = _micro_crm_campaignmonitor_retrieve_name_from_custom_fields($custom_fields);
        // Subscribe.
        if (!$cm->subscribe($list_id, $email, $name, array_values($custom_fields))) {
          $queue->createItem($channel);
        }
      }
    }
  }
}

/**
 *
 */
function micro_crm_campaignmonitor_webhook($type) {
  $data = file_get_contents('php://input');
  $response = json_decode($data);
  watchdog('micro_crm_campaignmonitor', print_r($response, TRUE), array(), WATCHDOG_NOTICE);
  // @todo load channel and update.
  // @todo load contact and update.
  // Compare data to determine if contact has to be updated.
}

/**
 *
 */
function _micro_crm_campaignmonitor_get_lists() {
  $lists = array();

  foreach(variable_get('micro_crm_campaignmonitor_lists', array()) as $list_id => $list) {
    if (!empty($list)) {
      $lists[$list_id] = $list_id;
    }
  }

  return $lists;
}

/**
 *
 */
function _micro_crm_campaignmonitor_get_field_list($list_id) {
  $list = array();
  foreach (variable_get('micro_crm_campaignmonitor_list_' . $list_id, array()) as $field_name => $field) {
    if (empty($field['field'])) {
      continue;
    }
    $list[$field_name] = $field;
  }
  return $list;
}

/**
 * @param $list_id
 * @param $channel
 * @return array
 */
function _micro_crm_campaignmonitor_prepare_custom_fields($list_id, $contact) {
  $output = array();

  $cm = CampaignMonitor::getConnector();
  $list = $cm->getExtendedList($list_id);
  $wrapper = entity_metadata_wrapper('micro_crm_contact', $contact);

  foreach (_micro_crm_campaignmonitor_get_field_list($list_id) as $field_name => $field) {
    if ($field_name !== 'Name') {
      $field_name = urldecode($field_name);

      if (!isset($list['CustomFields'][$field_name]['FieldName'])) {
        continue;
      }
      $field_name = $list['CustomFields'][$field_name]['FieldName'];
    }

    if (!$wrapper->__isset($field['field'])) {
      continue;
    }
// dpm(cache_get('campaignmonitor_lists'));
// dpm(_micro_crm_campaignmonitor_prepare_custom_fields('ab5a3b1293b3f13a00defdad32528ab9', micro_crm_contact_load(1)));
    if (is_array($wrapper->$field['field']->raw())) {
      foreach($wrapper->$field['field']->getIterator() as $value) {
        $output[] = array(
          'Key' => $field_name,
          'Value' => isset($field['map']) ? _micro_crm_campaignmonitor_map_replace($field['map'], $value->raw()) : $value->raw(),
        );
      }
    }
    else {
      $output[] = array(
        'Key' => $field_name,
        'Value' => isset($field['map']) ? _micro_crm_campaignmonitor_map_replace($field['map'], $wrapper->$field['field']->raw()) : $wrapper->$field['field']->raw(),
      );
    }
  }
  return $output;
}

/**
 * @param $custom_fields
 * @return null
 */
function _micro_crm_campaignmonitor_retrieve_name_from_custom_fields(&$custom_fields) {
  foreach($custom_fields as $id => $field) {
    if ($field['Key'] == 'Name') {
      unset($custom_fields[$id]);
      return $field['Value'];
    }
  }
  return NULL;
}

/**
 * @param $map
 * @param $value
 * @return mixed
 */
function _micro_crm_campaignmonitor_map_replace($map, $value) {
  if (!is_array($map)) {
    return $value;
  }
  $map = array_flip($map);
  if (isset($map[$value])) {
    return urldecode($map[$value]);
  }
  return $value;
}
