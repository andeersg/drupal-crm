<?php

/**
 * @file
 *
 */

define('CRM_MESSAGE_STATUS_DRAFT', 'draft');
define('CRM_MESSAGE_STATUS_QUEUED', 'queued');
define('CRM_MESSAGE_STATUS_SENT', 'sent');
define('CRM_MESSAGE_STATUS_FAILED', 'failed');

define('CRM_MESSAGE_QUEUE_FATAL_ERROR', -1);
define('CRM_MESSAGE_QUEUE_ERROR', FALSE);

module_load_include('inc', 'crm_message', 'crm_message.entity');

/**
 * Implements hook_views_api().
 */
function crm_message_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_message') . '/includes/views',
  );
}

/**
 * Implements hook_hook_info().
 */
function crm_message_hook_info() {
  $hooks = array(
    'crm_message_status_info' => array(
      'group' => 'crm',
    ),
    'crm_message_status_info_alter' => array(
      'group' => 'crm',
    ),
    'crm_message_presave' => array(
      'group' => 'crm',
    ),
    'crm_message_update' => array(
      'group' => 'crm',
    ),
    'crm_message_insert' => array(
      'group' => 'crm',
    ),
    'crm_message_delete' => array(
      'group' => 'crm',
    ),
    'crm_message_send' => array(
      'group' => 'crm',
    ),
    // @todo: Do we need it here?
    'crm_message_uri' => array(
      'group' => 'crm',
    ),
    'crm_message_view' => array(
      'group' => 'crm',
    ),
  );
  return $hooks;
}

/**
 * Implements hook_cron_queue_info().
 */
function crm_message_cron_queue_info() {

  $queues['crm_message_queue'] = array(
    'worker callback' => 'crm_message_send_queue_worker_callback',
    'time' => '300',
  );

  return $queues;
}

/**
 * Implements hook_permission().
 */
function crm_message_permission() {
  return array(
    'crm message overview' => array(
      'title' => t('Access to message list'),
    ),
    'crm message create' => array(
      'title' => t('Create new message'),
    ),
    'crm message view' => array(
      'title' => t('View message'),
    ),
    'crm message update' => array(
      'title' => t('Update message'),
    ),
    'crm message delete' => array(
      'title' => t('Delete message'),
    ),
    'crm message send' => array(
      'title' => t('Send message'),
    ),
    'crm message cancel' => array(
      'title' => t('Cancel message'),
    ),
  );
}

/**
 * Implements hook_crm_channel_fields_info().
 */
function crm_message_crm_channel_fields_info() {
  $types = crm_channel_types(TRUE);
  $array = array();
  foreach ($types as $key => $bundle) {
    $array['instances'][$key . '_crm_channel_single'] = array(
      'label' => t('Recipient (Channel)'),
      'widget' => array(
        'weight' => -99,
        'type' => 'entityreference_autocomplete',
        'module' => 'entityreference',
        'active' => 1,
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'size' => '60',
          'path' => '',
        ),
      ),
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'entityreference_label',
          'settings' => array(
            'link' => FALSE,
          ),
          'module' => 'entityreference',
          'weight' => -99,
        ),
      ),
      'required' => 1,
      'description' => t('Recipient has to be registered and valid channel.'),
      'default_value' => NULL,
      'field_name' => 'crm_channel_single',
      'entity_type' => 'crm_message',
      'bundle' => $key,
      'deleted' => 0,
    );
  }
  drupal_alter('crm_message_crm_channel_fields_info', $array);
  return $array;
}

/**
 * Implements hook_crm_message_update().
 */
function crm_message_crm_message_update($message) {
  // Set message to watchdog about new status for message.
  if (isset($message->original->status) && $message->original->status !== $message->status) {
    watchdog('crm_message', 'Message (message_id: @message) has new status: @op', array('@message' => $message->message_id, '@op' => crm_message_status_get_name($message->status)), WATCHDOG_NOTICE, l('view', 'admin/crm/message/' . $message->message_id));
  }
  // Add message to queue.
  if ($message->status === CRM_MESSAGE_STATUS_QUEUED && (!isset($message->original->status) || $message->original->status !== $message->status)) {
    $queue = DrupalQueue::get('crm_message_queue');
    $queue->createQueue();
    $queue->createItem($message->message_id);
  }
}

/**
 * Implements hook_crm_message_insert().
 */
function crm_message_crm_message_insert($message) {
  // Add message to queue.
  if ($message->status === CRM_MESSAGE_STATUS_QUEUED && (!isset($message->original->status) || $message->original->status !== $message->status)) {
    $queue = DrupalQueue::get('crm_message_queue');
    $queue->createQueue();
    $queue->createItem($message->message_id);
  }
}

/**
 * Implements hook_crm_message_status_info().
 */
function crm_message_crm_message_status_info() {
  $status = array();

  $status[CRM_MESSAGE_STATUS_FAILED] = array(
    'title' => t('Failed'),
    'description' => t('Message failed'),
    'weight' => 0,
  );

  $status[CRM_MESSAGE_STATUS_DRAFT] = array(
    'title' => t('Draft'),
    'description' => t('Draft message'),
    'weight' => 0,
  );

  $status[CRM_MESSAGE_STATUS_QUEUED] = array(
    'title' => t('Queued'),
    'description' => t('Message has been queued and will be sent soon.'),
    'weight' => 98,
  );

  $status[CRM_MESSAGE_STATUS_SENT] = array(
    'title' => t('Sent'),
    'description' => t('Message has been sent'),
    'weight' => 99,
  );

  return $status;
}

/**
 * Returns all statuses message declared by modules.
 *
 * @return array
 *   List of statuses
 */
function crm_message_statuses() {
  // First check the static cache for an order states array.
  $statuses = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the statuses now.
  if (empty($statuses)) {
    $statuses = module_invoke_all('crm_message_status_info');

    // Give other modules a chance to alter the order states.
    drupal_alter('crm_message_status_info', $statuses);

    uasort($statuses, 'drupal_sort_weight');
  }

  return $statuses;
}

/**
 * @param $status
 * @return null
 */
function crm_message_status_get_name($status) {
  $statuses = crm_message_statuses();
  if (isset($statuses[$status]['title'])) {
    return $statuses[$status]['title'];
  }
  return NULL;
}

/**
 * Returns list of available statuses.
 */
function crm_message_status_options_list() {

  $options = array();

  foreach (crm_message_statuses() as $key => $status) {
    $options[$key] = $status['title'];
  }

  return $options;
}

/**
 * @param $message
 */
function crm_message_send(&$message) {
  if (!isset($message->type)) {
    watchdog('crm_message', 'Message (message_id: @message_id) has incorrect type.', array('@message_id' => $message->message_id), WATCHDOG_ERROR);
    return FALSE;
  }
  $type = $message->type;
  $entity = entity_get_info('crm_message');
  if (!isset($type) || !isset($entity['bundles'][$type]['module'])) {
    watchdog('crm_message', 'Message (message_id: @message_id) cannot be sent due to lack of module.', array('@message_id' => $message->message_id), WATCHDOG_ERROR);
    return FALSE;
  }
  $module = $entity['bundles'][$type]['module'];

  // Check if message has been already sent or failed.
  if (in_array($message->status, array(CRM_MESSAGE_STATUS_SENT))) {
    return TRUE;
  }
  elseif (in_array($message->status, array(CRM_MESSAGE_STATUS_FAILED))) {
    return FALSE;
  }

  // First set status to send and if it fails rollback.
  $transaction = db_transaction();
  try {
    // Mark message as SENT.
    $message->status = CRM_MESSAGE_STATUS_SENT;
    $message->revision = TRUE;
    $message->log = 'Message has been sent';
    entity_save('crm_message', $message);

    // Try to send message.
    $value = module_invoke($module, 'crm_message_send', $message);
    if ($value === TRUE) {
      return TRUE;
    }
    throw new Exception('Unable to send message');
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('crm_message', $e);
  }

  try {
    $message->status = CRM_MESSAGE_STATUS_QUEUED;
    $message->revision = TRUE;
    $message->log = 'Attempt to send message failed';
    if (isset($message->data['attempt']) && is_numeric($message->data['attempt'])) {
      $message->data['attempt']++;
      if ($message->data['attempt'] >= variable_get('crm_message_threshold', 5)) {
        $message->log = 'Status of the message has been changed to failed due to to many send attempts';
        $message->status = CRM_MESSAGE_STATUS_FAILED;
      }
    }
    else {
      $message->data['attempt'] = 1;
    }

    entity_save('crm_message', $message);
  }
  catch (Exception $e) {
    watchdog_exception('crm_message', $e);
  }
  return FALSE;
}

/**
 * @param object $message
 *
 * @todo: check if status exists and return true or false.
 */
function crm_message_status_update(&$message, $status) {
  $message->status = $status;
  $message->revision = TRUE;
  $message->log = format_string('Message has been queued', array('@op' => crm_message_status_get_name($status)));
  entity_save('crm_message', $message);
}

/**
 * Returns boolean value if channel is supported by message module or not.
 *
 * @param $type
 * @return bool
 */
function _crm_message_channel_supported($type) {
  $entity = entity_get_info('crm_message');
  if (isset($entity['bundles'][$type])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns list of types (bundles) in key => title format.
 *
 * @return array
 */
function crm_message_types() {
  // First check the static cache for a product types array.
  $message_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($message_types)) {
    $message_types = array();

    $entity = entity_get_info('crm_message');
    if (isset($entity['bundles'])) {
      foreach ($entity['bundles'] as $key => $bundle) {
        // @todo: add something here or simplify it.
        $message_types[$key] = $bundle['label'];
      }
    }
  }

  return $message_types;
}

/**
 * Returns type label.
 */
function crm_message_type_get_name($type) {
  $types = crm_message_types();
  if (isset($types[$type])) {
    return $types[$type];
  }
  return NULL;
}

/**
 * @param $values
 * @param string $entity_type
 */
function crm_message_create($values, $entity_type = 'crm_message') {
  if (isset($values['channel']) && isset($values['channel']->type)) {
    $bundle = $values['channel']->type;
  }
  elseif ($values['type']) {
    $bundle = $values['type'];
  }
  else {
    return FALSE;
  }
  $entity = entity_get_info($entity_type);
  if (!isset($entity['bundles'][$bundle]['module'])) {
    return FALSE;
  }
  $module = $entity['bundles'][$bundle]['module'];
  if (!function_exists($module . '_crm_message_create')) {
    return FALSE;
  }
  return module_invoke($module, 'crm_message_create', $values, $entity_type);
}

/**
 *
 *
 * It takes only queued messages!
 *
 * @param $field
 *
 * @todo: Use this function somewhere or delete it.
 */
function crm_message_queue_populate($conditions = NULL) {
  $queue = DrupalQueue::get('crm_message_queue');
  $queue->createQueue();

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'crm_message')
    ->propertyCondition('status', CRM_MESSAGE_STATUS_QUEUED)
    ->propertyOrderBy('updated', 'ASC');

  foreach ($conditions as $condition) {
    if ($condition['type'] == 'property') {
      $query->propertyCondition($condition['column'], $condition['value']);
    }
    elseif ($condition['type'] == 'entity') {
      $query->entityCondition($condition['name'], $condition['value']);
    }
    elseif ($condition['type'] == 'field') {
      $query->fieldCondition($condition['field'], $condition['column'], $condition['value']);
    }
  }

  $result = $query->execute();

  if (isset($result['crm_message'])) {
    foreach(array_keys($result['crm_message']) as $key) {
      $queue->createItem($key);
    }
  }

}

/**
 * Queue worker callback.
 *
 * @param $message_id
 *   ID of the message which supposed to be send.
 *
 * @return bool
 *   TRUE or FALSE.
 *
 * @see crm_message_cron_queue_info()
 */
function crm_message_send_queue_worker_callback($message_id) {
  $result = crm_message_send_queue_worker_callback_run($message_id);
  if ($result === FALSE) {
    throw new Exception(format_string('Item @item could not be processed (requeue)', array('@item' => $message_id)));
  }
}

/**
 * @param $message_id
 * @param $context
 */
function crm_message_send_worker_callback_batch_wrapper($message_id, &$context) {
  try {
    $result = crm_message_send_queue_worker_callback_run($message_id);
  }
  catch (Exception $e) {
    $result = CRM_MESSAGE_QUEUE_ERROR;
  }
  if ($result === CRM_MESSAGE_QUEUE_FATAL_ERROR) {
    // Unknown error, skip. Forever.
  }
  elseif ($result) {
    // Sent.
    $context['results']['iterations'][] = array(
      'message_id' => $message_id,
      'status' => CRM_MESSAGE_STATUS_SENT,
    );
  }
  else {
    // Re-queued.
    $context['results']['iterations'][] = array(
      'message_id' => $message_id,
      'status' => CRM_MESSAGE_STATUS_QUEUED,
    );
  }
}

/**
 * @param $message_id
 * @return bool
 */
function crm_message_send_queue_worker_callback_run($message_id) {

  if (!($message = entity_load_single('crm_message', $message_id)) || !is_object($message)) {
    watchdog('crm_message', 'Message (message_id: @message_id) is broken. Queue worker will not try to send it anymore. Debug: @message', array('@message_id' => $message_id, '@message' => print_r($message, TRUE)), WATCHDOG_ALERT);
    return CRM_MESSAGE_QUEUE_FATAL_ERROR;
  }
  if ($message->status <> CRM_MESSAGE_STATUS_QUEUED) {
    return TRUE;
  }
  return crm_message_send($message);
}
