<?php

/**
 * @file
 *
 */

define('CRM_MESSAGE_STATUS_REGISTERED', 'registered');
define('CRM_MESSAGE_STATUS_SENT', 'sent');

module_load_include('inc', 'crm_message', 'crm_message.entity');

/**
 * Implements hook_views_api().
 */
function crm_message_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_message') . '/includes/views',
  );
}

/**
 * Implements hook_hook_info().
 */
function crm_message_hook_info() {
  $hooks = array(
    'crm_message_status_info' => array(
      'group' => 'crm',
    ),
    'crm_message_status_info_alter' => array(
      'group' => 'crm',
    ),
    'crm_message_uri' => array(
      'group' => 'crm',
    ),
    'crm_message_view' => array(
      'group' => 'crm',
    ),
    'crm_message_presave' => array(
      'group' => 'crm',
    ),
    'crm_message_update' => array(
      'group' => 'crm',
    ),
    'crm_message_insert' => array(
      'group' => 'crm',
    ),
    'crm_message_delete' => array(
      'group' => 'crm',
    ),
    'crm_message_send' => array(
      'group' => 'crm',
    ),
  );
  return $hooks;
}

/**
 * Implements hook_crm_message_update().
 */
function crm_message_crm_message_update($message) {
  if (isset($message->original->status) && $message->original->status == CRM_MESSAGE_STATUS_REGISTERED && $message->status == CRM_MESSAGE_STATUS_SENT) {
    watchdog('crm_message', 'Message (message_id: @message) has been sent', array('@message' => $message->message_id), WATCHDOG_NOTICE, l('view', 'admin/people/crm/message/' . $message->message_id));
  }
  else {
    watchdog('crm_message', 'Message (message_id: @message) has been saved', array('@message' => $message->message_id), WATCHDOG_NOTICE, l('view', 'admin/people/crm/message/' . $message->message_id));
  }
}

/**
 * Implements hook_crm_message_status_info().
 */
function crm_message_crm_message_status_info() {
  $status = array();

  $status[CRM_MESSAGE_STATUS_REGISTERED] = array(
    'title' => t('Registered'),
    'description' => t('Registered, unprocessed message'),
    'weight' => -99,
  );

  $status[CRM_MESSAGE_STATUS_SENT] = array(
    'title' => t('Sent'),
    'description' => t('Message has been sent'),
    'weight' => -99,
  );

  return $status;
}

/**
 * Returns all statuses message declared by modules.
 *
 * @return array
 *   List of statuses
 */
function crm_message_statuses() {
  // First check the static cache for an order states array.
  $statuses = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the statuses now.
  if (empty($statuses)) {
    $statuses = module_invoke_all('crm_message_status_info');

    // Give other modules a chance to alter the order states.
    drupal_alter('crm_message_status_info', $statuses);

    uasort($statuses, 'drupal_sort_weight');
  }

  return $statuses;
}

/**
 * Returns list of available statuses.
 */
function crm_message_status_options_list() {

  $options = array();

  foreach (crm_message_statuses() as $key => $status) {
    $options[$key] = $status['title'];
  }

  return $options;
}

/**
 * @param $message
 */
function crm_message_send($message) {
  if (!isset($message->type)) {
    return FALSE;
  }
  $type = $message->type;
  $entity = entity_get_info('crm_message');
  if (!isset($type) || !isset($entity['bundles'][$type]['module'])) {
    return FALSE;
  }
  $module = $entity['bundles'][$type]['module'];
  if ($value = module_invoke($module, 'crm_message_send', $message)) {
    // @todo change status and save.
    if ($value == TRUE) {
      $message->status = CRM_MESSAGE_STATUS_SENT;
      $message->revision = TRUE;
      $message->log = 'Message ' . $message->message_id . ' has been sent';
      entity_save('crm_message', $message);
    }
    return $value;
  }
  return FALSE;
}

/**
 * Returns boolean value if channel is supported by message module or not.
 *
 * @param $type
 * @return bool
 */
function _crm_message_channel_supported($type) {
  $entity = entity_get_info('crm_message');
  if (isset($entity['bundles'][$type])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
